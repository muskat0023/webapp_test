{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding_kdh\\\\Y2023\\\\007_react\\\\webapp_simulator_v1\\\\frontend\\\\src\\\\components\\\\SimulatorInputForm.js\";\n// src/components/SimulatorInputForm.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimulatorInputForm = ({\n  inputs,\n  onChange,\n  onSimulate,\n  errors = {}\n}) => {\n  const handleInputChange = (index, value) => {\n    onChange(index, value);\n  };\n  const handleSimulate = () => {\n    const inputErrors = {};\n    const isFormValid = inputs.every((input, index) => {\n      const isValidNumber = /^\\d*\\.?\\d+$/.test(input.value);\n      if (input.value === '' || !isValidNumber) {\n        inputErrors[index] = 'Please enter a valid number';\n        return false;\n      }\n      return true;\n    });\n    if (isFormValid) {\n      onSimulate();\n    } else {\n      alert('Please fill in all fields with valid numbers');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sim-input-form\",\n    children: inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `input-${index}`,\n        children: input.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: `input-${index}`,\n        value: input.value,\n        onChange: e => handleInputChange(index, e.target.value),\n        className: errors[index] ? 'error' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), errors[index] && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errors[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = SimulatorInputForm;\nexport default SimulatorInputForm;\nvar _c;\n$RefreshReg$(_c, \"SimulatorInputForm\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SimulatorInputForm","inputs","onChange","onSimulate","errors","handleInputChange","index","value","handleSimulate","inputErrors","isFormValid","every","input","isValidNumber","test","alert","className","children","map","htmlFor","label","fileName","_jsxFileName","lineNumber","columnNumber","type","id","e","target","_c","$RefreshReg$"],"sources":["C:/Coding_kdh/Y2023/007_react/webapp_simulator_v1/frontend/src/components/SimulatorInputForm.js"],"sourcesContent":["// src/components/SimulatorInputForm.js\r\nimport React from 'react';\r\n\r\nconst SimulatorInputForm = ({ inputs, onChange, onSimulate, errors = {} }) => {\r\n  const handleInputChange = (index, value) => {\r\n    onChange(index, value);\r\n  };\r\n\r\n  const handleSimulate = () => {\r\n    const inputErrors = {};\r\n    const isFormValid = inputs.every((input, index) => {\r\n      const isValidNumber = /^\\d*\\.?\\d+$/.test(input.value);\r\n      if (input.value === '' || !isValidNumber) {\r\n        inputErrors[index] = 'Please enter a valid number';\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    if (isFormValid) {\r\n      onSimulate();\r\n    } else {\r\n      alert('Please fill in all fields with valid numbers');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sim-input-form\">\r\n      {inputs.map((input, index) => (\r\n        <div key={index} className=\"input-row\">\r\n          <label htmlFor={`input-${index}`}>{input.label}</label>\r\n          <input\r\n            type=\"text\"\r\n            id={`input-${index}`}\r\n            value={input.value}\r\n            onChange={(e) => handleInputChange(index, e.target.value)}\r\n            className={errors[index] ? 'error' : ''}\r\n          />\r\n          {errors[index] && <span className=\"error-message\">{errors[index]}</span>}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulatorInputForm;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,MAAM,GAAG,CAAC;AAAE,CAAC,KAAK;EAC5E,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC1CL,QAAQ,CAACI,KAAK,EAAEC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG,CAAC,CAAC;IACtB,MAAMC,WAAW,GAAGT,MAAM,CAACU,KAAK,CAAC,CAACC,KAAK,EAAEN,KAAK,KAAK;MACjD,MAAMO,aAAa,GAAG,aAAa,CAACC,IAAI,CAACF,KAAK,CAACL,KAAK,CAAC;MACrD,IAAIK,KAAK,CAACL,KAAK,KAAK,EAAE,IAAI,CAACM,aAAa,EAAE;QACxCJ,WAAW,CAACH,KAAK,CAAC,GAAG,6BAA6B;QAClD,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC,CAAC;IAEF,IAAII,WAAW,EAAE;MACfP,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACLY,KAAK,CAAC,8CAA8C,CAAC;IACvD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BhB,MAAM,CAACiB,GAAG,CAAC,CAACN,KAAK,EAAEN,KAAK,kBACvBP,OAAA;MAAiBiB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACpClB,OAAA;QAAOoB,OAAO,EAAG,SAAQb,KAAM,EAAE;QAAAW,QAAA,EAAEL,KAAK,CAACQ;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvDzB,OAAA;QACE0B,IAAI,EAAC,MAAM;QACXC,EAAE,EAAG,SAAQpB,KAAM,EAAE;QACrBC,KAAK,EAAEK,KAAK,CAACL,KAAM;QACnBL,QAAQ,EAAGyB,CAAC,IAAKtB,iBAAiB,CAACC,KAAK,EAAEqB,CAAC,CAACC,MAAM,CAACrB,KAAK,CAAE;QAC1DS,SAAS,EAAEZ,MAAM,CAACE,KAAK,CAAC,GAAG,OAAO,GAAG;MAAG;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,EACDpB,MAAM,CAACE,KAAK,CAAC,iBAAIP,OAAA;QAAMiB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEb,MAAM,CAACE,KAAK;MAAC;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA,GAThElB,KAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACK,EAAA,GAxCI7B,kBAAkB;AA0CxB,eAAeA,kBAAkB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}